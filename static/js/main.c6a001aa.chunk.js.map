{"version":3,"sources":["ErrorBoundary.js","Playlist.js","App.js","index.js"],"names":["ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","react_default","a","createElement","children","React","Component","Playlist","_useState","useState","_useState2","slicedToArray","tracks","setTracks","_useState3","_useState4","fetchTracksStatus","setFetchTracksStatus","_useState5","expandTracks","_useState6","fetchTracks","SpotifyWebApi","getPlaylistTracks","playlist","id","then","response","items","name","className","uri","title","src","concat","width","height","frameBorder","allowtransparency","allow","onClick","map","trackObj","track","key","artists","artist","index","renderTrackArtists","album","renderTracks","SPOTIFY_USER_ID","SPOTIFY_CLIENT_ID","COOKIE_NAME","App","undefined","accessToken","setAccessToken","fetchPlaylistsStatus","setFetchPlaylistsStatus","fetchPlaylistsChunkStatus","setFetchPlaylistsChunkStatus","_useState7","_useState8","fetchPlaylistOffset","setFetchPlaylistOffset","_useState9","_useState10","playlists","setPlaylists","useEffect","cookieAccessToken","cookie","get","spotifyApi","queryAccessToken","URLSearchParams","window","location","hash","slice","set","offset","playlistRegex","getUserPlaylists","limit","newPlaylists","filter","test","toConsumableArray","next","catch","status","remove","src_ErrorBoundary","src_Playlist","renderFetchPlaylistState","encodedRedirectURI","encodeURI","process","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c6a001aa.chunk.js","sourcesContent":["import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {error: false}\n  }\n\n  componentDidCatch(error) {\n    throw error;\n  }\n\n  render() {\n    if(this.state.error) {\n      return (\n        <div>there was an error</div>,\n        this.props.children\n      )\n    } else {\n      return this.props.children\n    }\n  }\n}\n\nexport default ErrorBoundary;","import React, { useState } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\n\nfunction Playlist(props) {\n  const [tracks, setTracks] = useState([])\n  const [fetchTracksStatus, setFetchTracksStatus] = useState('NOT_ASKED')\n  const [expandTracks, setExpandTracks] = useState(props.expandTracks)\n\n  const fetchTracks = () => {\n    setFetchTracksStatus('PENDING')\n    const spotifyApi = new SpotifyWebApi()\n    spotifyApi.getPlaylistTracks(props.playlist.id).then((response, error) => {\n      if(error) {\n        setFetchTracksStatus('ERROR')\n      } else {\n        setFetchTracksStatus('SUCCESS')\n        setTracks(response.items)\n      }\n    })\n  }\n\n  if(props.expandTracks && fetchTracksStatus === 'NOT_ASKED') {\n    fetchTracks()\n  }\n\n  const renderTrackArtists = (track) => {\n    return track.artists.map((artist, index) => {\n      return artist.name;\n    })\n  };\n\n  const renderTracks = () => {\n    switch (fetchTracksStatus) {\n      case 'NOT_ASKED':\n        return <button className=\"button\" onClick={fetchTracks}>Expand tracks</button>\n      case 'PENDING':\n        return <div>Loading tracks...</div>\n      case 'SUCCESS':\n        return tracks.map((trackObj) => {\n          const track = trackObj.track\n          return (\n            <div key={track.id} className=\"trackContainer\">\n              <p> {`${track.name} by ${renderTrackArtists(track)} from ${track.album.name}`} </p>\n            </div>\n          );\n        })\n    }\n  }\n\n  return (\n    <section>\n      <h2>{props.playlist.name}</h2>\n      <div>\n        <span className=\"uri\">URI: {props.playlist.uri}</span>\n        <iframe\n          title={props.playlist.name}\n          src={`https://open.spotify.com/embed/playlist/${props.playlist.id}`}\n          width=\"300\"\n          height=\"380\"\n          frameBorder=\"0\"\n          allowtransparency=\"true\"\n          allow=\"encrypted-media\">\n        </iframe>\n        <div className=\"tracks\">\n          { renderTracks() }\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Playlist;","import React, { useState, useEffect } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport cookie from 'js-cookie'\nimport 'url-search-params-polyfill'\nimport ErrorBoundary from './ErrorBoundary'\nimport Playlist from './Playlist'\nimport './App.css';\n\nconst SPOTIFY_USER_ID = 'jon.trainor';\nconst SPOTIFY_CLIENT_ID = '0b71959111884567b4530208b9f5add7';\nconst COOKIE_NAME = 'jontrainor-spotify-playlist';\n\nfunction App() {\n\n  const [accessToken, setAccessToken] = useState(undefined);\n  const [fetchPlaylistsStatus, setFetchPlaylistsStatus] = useState('NOT_ASKED');\n  const [fetchPlaylistsChunkStatus, setFetchPlaylistsChunkStatus] = useState('NOT_ASKED');\n  const [fetchPlaylistOffset, setFetchPlaylistOffset] = useState(0)\n  const [playlists, setPlaylists] = useState([])\n\n  // get and set auth token\n  useEffect(() => {\n    const cookieAccessToken = cookie.get(COOKIE_NAME)\n    const spotifyApi = new SpotifyWebApi()\n    const query = new URLSearchParams(window.location.hash.slice(1))\n    // if spotify authorization failed\n    // const queryError = query.get('error')\n    // const queryErrorState = query.get('state')\n\n    const queryAccessToken = query.get('access_token')\n    if(queryAccessToken) {\n      spotifyApi.setAccessToken(queryAccessToken)\n      setAccessToken(queryAccessToken)\n      cookie.set(COOKIE_NAME, queryAccessToken)\n    } else if(cookieAccessToken) {\n      setAccessToken(cookieAccessToken)\n      spotifyApi.setAccessToken(cookieAccessToken)\n    }\n  }, [window.location.hash]);\n\n  // get playlists\n  useEffect(() => {\n    // ex: 06-19-2019\n    const playlistRegex = /^20\\d\\d\\.\\d\\d\\.\\d\\d$/\n\n    const getUserPlaylists = (offset) => {\n      const spotifyApi = new SpotifyWebApi()\n      return spotifyApi.getUserPlaylists(SPOTIFY_USER_ID, {\n        limit: 50,\n        offset,\n      })\n    }\n\n    if(accessToken && fetchPlaylistsChunkStatus !== 'PENDING' && fetchPlaylistOffset !== null) {\n      setFetchPlaylistsChunkStatus('PENDING')\n      setFetchPlaylistsStatus('PENDING')\n      getUserPlaylists(fetchPlaylistOffset).then((response, error) => {\n        if(error) {\n          setFetchPlaylistsChunkStatus('ERROR')\n          setFetchPlaylistsStatus('ERROR')\n        } else {\n          setFetchPlaylistsChunkStatus('SUCCESS')\n          const newPlaylists = response.items.filter((playlist) => {\n            return playlistRegex.test(playlist.name)\n          })\n          setPlaylists([...playlists, ...newPlaylists])\n\n          if(response.next) {\n            setFetchPlaylistOffset(fetchPlaylistOffset + response.limit)\n          } else {\n            setFetchPlaylistOffset(null)\n          setFetchPlaylistsStatus('SUCCESS')\n          }\n        }\n      }).catch((error) => {\n        // access token expired\n        if(error.status === 401) {\n          cookie.remove(COOKIE_NAME)\n          setAccessToken(undefined)\n          setFetchPlaylistsStatus('NOT_ASKED')\n        }\n      })\n    }\n  }, [SPOTIFY_USER_ID, accessToken, fetchPlaylistOffset])\n\n  const handleLoginClick = () => {\n    const encodedRedirectURI = encodeURI(process.env.REACT_APP_REDIRECT_URI)\n    window.location = `https://accounts.spotify.com/authorize?response_type=token&client_id=${SPOTIFY_CLIENT_ID}&redirect_uri=${encodedRedirectURI}`\n  }\n\n  const renderFetchPlaylistState = () => {\n    switch(fetchPlaylistsStatus) {\n      case 'NOT_ASKED' || 'PENDING':\n        return <div>loading</div>\n      case 'ERROR':\n        return <div>error</div>\n      case 'SUCCESS':\n        return (\n          <main>\n            <h1>Weekly Playlists</h1>\n            { playlists.map((playlist, index) => {\n              return (\n                <Playlist\n                  key={playlist.id}\n                  playlist={playlist}\n                  expandTracks={index === 0}\n                />\n              )\n            })}\n          </main>\n        )\n      default:\n        return <noscript/>\n    }\n  }\n\n  return (\n    <ErrorBoundary>\n      {accessToken ? renderFetchPlaylistState() : (\n        <button className=\"button\" onClick={handleLoginClick}>Log in to Spotify</button>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}