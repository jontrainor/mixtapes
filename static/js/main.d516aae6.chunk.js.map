{"version":3,"sources":["ErrorBoundary.js","Playlist.js","App.js","index.js"],"names":["ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","react_default","a","createElement","children","React","Component","Playlist","playlist","name","title","src","concat","uri","split","width","height","frameborder","allowtransparency","allow","SPOTIFY_USER_ID","SPOTIFY_CLIENT_ID","COOKIE_NAME","App","_useState","useState","undefined","_useState2","slicedToArray","accessToken","setAccessToken","_useState3","_useState4","fetchPlaylistsStatus","setFetchPlaylistsStatus","_useState5","_useState6","fetchPlaylistsChunkStatus","setFetchPlaylistsChunkStatus","_useState7","_useState8","fetchPlaylistOffset","setFetchPlaylistOffset","_useState9","_useState10","playlists","setPlaylists","useEffect","cookieAccessToken","cookie","get","spotifyApi","SpotifyWebApi","queryAccessToken","URLSearchParams","window","location","hash","slice","set","offset","playlistRegex","getUserPlaylists","limit","then","response","newPlaylists","items","filter","test","toConsumableArray","next","catch","status","remove","src_ErrorBoundary","map","index","src_Playlist","renderFetchPlaylistState","className","onClick","encodedRedirectURI","encodeURI","process","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d516aae6.chunk.js","sourcesContent":["import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {error: false}\n  }\n\n  componentDidCatch(error) {\n    throw error;\n  }\n\n  render() {\n    if(this.state.error) {\n      return (\n        <div>there was an error</div>,\n        this.props.children\n      )\n    } else {\n      return this.props.children\n    }\n  }\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\nfunction Playlist(props) {\n  const getPlaylistId = (playlist) => {\n    // spotify:playlist:123asdf\n    const uriParts = playlist.uri.split(':')\n    return uriParts[2]\n  }\n\n  return (\n    <section>\n      <h2>{props.playlist.name}</h2>\n      <div>\n        <iframe\n          title={props.playlist.name}\n          src={`https://open.spotify.com/embed/playlist/${getPlaylistId(props.playlist)}`}\n          width=\"300\"\n          height=\"380\"\n          frameborder=\"0\"\n          allowtransparency=\"true\"\n          allow=\"encrypted-media\">\n        </iframe>\n      </div>\n    </section>\n  )\n}\n\nexport default Playlist;","import React, { useState, useEffect } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport cookie from 'js-cookie'\nimport 'url-search-params-polyfill'\nimport ErrorBoundary from './ErrorBoundary'\nimport Playlist from './Playlist'\nimport './App.css';\n\nconst SPOTIFY_USER_ID = 'jon.trainor';\nconst SPOTIFY_CLIENT_ID = '0b71959111884567b4530208b9f5add7';\nconst COOKIE_NAME = 'jontrainor-spotify-playlist';\n\nfunction App() {\n\n  const [accessToken, setAccessToken] = useState(undefined);\n  const [fetchPlaylistsStatus, setFetchPlaylistsStatus] = useState('NOT_ASKED');\n  const [fetchPlaylistsChunkStatus, setFetchPlaylistsChunkStatus] = useState('NOT_ASKED');\n  const [fetchPlaylistOffset, setFetchPlaylistOffset] = useState(0)\n  const [playlists, setPlaylists] = useState([])\n\n  // get and set auth token\n  useEffect(() => {\n    const cookieAccessToken = cookie.get(COOKIE_NAME)\n    const spotifyApi = new SpotifyWebApi()\n    const query = new URLSearchParams(window.location.hash.slice(1))\n    // if spotify authorization failed\n    // const queryError = query.get('error')\n    // const queryErrorState = query.get('state')\n\n    const queryAccessToken = query.get('access_token')\n    if(queryAccessToken) {\n      spotifyApi.setAccessToken(queryAccessToken)\n      setAccessToken(queryAccessToken)\n      cookie.set(COOKIE_NAME, queryAccessToken)\n    } else if(cookieAccessToken) {\n      setAccessToken(cookieAccessToken)\n      spotifyApi.setAccessToken(cookieAccessToken)\n    }\n  }, [window.location.hash]);\n\n  // get playlists\n  useEffect(() => {\n    // ex: 06-19-2019\n    const playlistRegex = /^20\\d\\d\\.\\d\\d\\.\\d\\d$/\n\n    const getUserPlaylists = (offset) => {\n      const spotifyApi = new SpotifyWebApi()\n      return spotifyApi.getUserPlaylists(SPOTIFY_USER_ID, {\n        limit: 50,\n        offset,\n      })\n    }\n\n    if(accessToken && fetchPlaylistsChunkStatus !== 'PENDING' && fetchPlaylistOffset !== null) {\n      setFetchPlaylistsChunkStatus('PENDING')\n      setFetchPlaylistsStatus('PENDING')\n      getUserPlaylists(fetchPlaylistOffset).then((response, error) => {\n        if(error) {\n          setFetchPlaylistsChunkStatus('ERROR')\n          setFetchPlaylistsStatus('ERROR')\n        } else {\n          setFetchPlaylistsChunkStatus('SUCCESS')\n          const newPlaylists = response.items.filter((playlist) => {\n            return playlistRegex.test(playlist.name)\n          })\n          setPlaylists([...playlists, ...newPlaylists])\n\n          if(response.next) {\n            setFetchPlaylistOffset(fetchPlaylistOffset + response.limit)\n          } else {\n            setFetchPlaylistOffset(null)\n          setFetchPlaylistsStatus('SUCCESS')\n          }\n        }\n      }).catch((error) => {\n        // access token expired\n        if(error.status === 401) {\n          cookie.remove(COOKIE_NAME)\n          setAccessToken(undefined)\n          setFetchPlaylistsStatus('NOT_ASKED')\n        }\n      })\n    }\n  }, [SPOTIFY_USER_ID, accessToken, fetchPlaylistOffset])\n\n  const handleLoginClick = () => {\n    const encodedRedirectURI = encodeURI(process.env.REACT_APP_REDIRECT_URI)\n    window.location = `https://accounts.spotify.com/authorize?response_type=token&client_id=${SPOTIFY_CLIENT_ID}&redirect_uri=${encodedRedirectURI}`\n  }\n\n  const renderFetchPlaylistState = () => {\n    switch(fetchPlaylistsStatus) {\n      case 'NOT_ASKED' || 'PENDING':\n        return <div>loading</div>\n      case 'ERROR':\n        return <div>error</div>\n      case 'SUCCESS':\n        return (\n          <main>\n            <h1>Weekly Playlists</h1>\n            { playlists.map((playlist, index) => {\n              return (\n                <Playlist\n                  playlist={playlist}\n                />\n              )\n            })}\n          </main>\n        )\n      default:\n        return <noscript/>\n    }\n  }\n\n  return (\n    <ErrorBoundary>\n      {accessToken ? renderFetchPlaylistState() : (\n        <button className=\"button\" onClick={handleLoginClick}>Log in to Spotify</button>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}